# Gym Membership Management System Architecture

## Overview
This document outlines the architecture and implementation steps for creating a simple gym membership management system using Laravel with the React Inertia.js starter kit.

## System Features
- User authentication (members, staff, admin)
- Member registration and profile management
- Membership plans and subscriptions
- Payment processing
- Attendance tracking
- Administrative dashboard

## Technology Stack
- **Backend:** Laravel
- **Frontend:** React.js with Inertia.js
- **Database:** MySQL
- **Authentication:** Laravel Breeze with Inertia
- **CSS Framework:** Tailwind CSS

#Step 1 : Install Laravel

## Step 2: Design Database Structure

### 2.1 Create models and migrations

#### Users Table (already created by Laravel)
```bash
# The users table already exists, but we'll customize it
php artisan make:migration add_role_to_users_table --table=users
```

Update the migration file:
```php
public function up(): void
{
    Schema::table('users', function (Blueprint $table) {
        $table->enum('role', ['admin', 'staff', 'member'])->default('member');
        $table->string('phone_number')->nullable();
        $table->date('date_of_birth')->nullable();
        $table->text('address')->nullable();
        $table->string('emergency_contact')->nullable();
        $table->string('emergency_contact_phone')->nullable();
    });
}
```

#### Membership Plans
```bash
php artisan make:model MembershipPlan -m
```

Edit the migration file:
```php
public function up(): void
{
    Schema::create('membership_plans', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->text('description');
        $table->decimal('price', 8, 2);
        $table->integer('duration_days');
        $table->boolean('is_active')->default(true);
        $table->timestamps();
    });
}
```

#### Subscriptions
```bash
php artisan make:model Subscription -m
```

Edit the migration file:
```php
public function up(): void
{
    Schema::create('subscriptions', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->foreignId('membership_plan_id')->constrained()->onDelete('cascade');
        $table->date('start_date');
        $table->date('end_date');
        $table->enum('status', ['active', 'expired', 'cancelled'])->default('active');
        $table->timestamps();
    });
}
```

#### Payments
```bash
php artisan make:model Payment -m
```

Edit the migration file:
```php
public function up(): void
{
    Schema::create('payments', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->foreignId('subscription_id')->constrained()->onDelete('cascade');
        $table->decimal('amount', 8, 2);
        $table->string('payment_method');
        $table->string('transaction_id')->nullable();
        $table->enum('status', ['pending', 'completed', 'failed'])->default('pending');
        $table->timestamp('payment_date');
        $table->timestamps();
    });
}
```

#### Attendance
```bash
php artisan make:model Attendance -m
```

Edit the migration file:
```php
public function up(): void
{
    Schema::create('attendances', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->timestamp('check_in')->nullable();
        $table->timestamp('check_out')->nullable();
        $table->timestamps();
    });
}
```

### 2.2 Define model relationships

#### User Model (app/Models/User.php)
```php
// Add these methods to the User class
public function subscriptions()
{
    return $this->hasMany(Subscription::class);
}

public function payments()
{
    return $this->hasMany(Payment::class);
}

public function attendances()
{
    return $this->hasMany(Attendance::class);
}
```

#### MembershipPlan Model
```php
public function subscriptions()
{
    return $this->hasMany(Subscription::class);
}
```

#### Subscription Model
```php
public function user()
{
    return $this->belongsTo(User::class);
}

public function membershipPlan()
{
    return $this->belongsTo(MembershipPlan::class);
}

public function payments()
{
    return $this->hasMany(Payment::class);
}
```

#### Payment Model
```php
public function user()
{
    return $this->belongsTo(User::class);
}

public function subscription()
{
    return $this->belongsTo(Subscription::class);
}
```

#### Attendance Model
```php
public function user()
{
    return $this->belongsTo(User::class);
}
```

## Step 3: Create Controllers

### 3.1 Generate Controllers
```bash
php artisan make:controller DashboardController
php artisan make:controller MemberController
php artisan make:controller MembershipPlanController --resource
php artisan make:controller SubscriptionController --resource
php artisan make:controller PaymentController --resource
php artisan make:controller AttendanceController --resource
```

### 3.2 Implement Controller Logic

#### DashboardController.php
```php
<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Subscription;
use App\Models\MembershipPlan;
use App\Models\Payment;
use App\Models\Attendance;
use Illuminate\Http\Request;
use Inertia\Inertia;

class DashboardController extends Controller
{
    public function index()
    {
        $userCount = User::where('role', 'member')->count();
        $activeSubscriptions = Subscription::where('status', 'active')->count();
        $totalRevenue = Payment::where('status', 'completed')->sum('amount');
        $todayAttendance = Attendance::whereDate('check_in', now())->count();

        return Inertia::render('Dashboard', [
            'stats' => [
                'userCount' => $userCount,
                'activeSubscriptions' => $activeSubscriptions,
                'totalRevenue' => $totalRevenue,
                'todayAttendance' => $todayAttendance,
            ]
        ]);
    }
}
```

#### MemberController.php
```php
<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Subscription;
use Illuminate\Http\Request;
use Inertia\Inertia;

class MemberController extends Controller
{
    public function index()
    {
        $members = User::where('role', 'member')
            ->with('subscriptions.membershipPlan')
            ->latest()
            ->paginate(10);

        return Inertia::render('Members/Index', [
            'members' => $members
        ]);
    }

    public function show($id)
    {
        $member = User::with([
            'subscriptions.membershipPlan',
            'payments',
            'attendances' => function($query) {
                $query->latest()->take(10);
            }
        ])->findOrFail($id);

        return Inertia::render('Members/Show', [
            'member' => $member
        ]);
    }
}
```

## Step 4: Create Routes (DONT TOUCH THE EXISTING ROUTES)

### 4.1 Add routes in web.php
```php
<?php

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\MemberController;
use App\Http\Controllers\MembershipPlanController;
use App\Http\Controllers\SubscriptionController;
use App\Http\Controllers\PaymentController;
use App\Http\Controllers\AttendanceController;
use Illuminate\Foundation\Application;
use Illuminate\Support\Facades\Route;
use Inertia\Inertia;

// Public routes
Route::get('/', function () {
    return Inertia::render('Welcome', [
        'canLogin' => Route::has('login'),
        'canRegister' => Route::has('register'),
        'laravelVersion' => Application::VERSION,
        'phpVersion' => PHP_VERSION,
    ]);
});

// Protected routes
Route::middleware(['auth', 'verified'])->group(function () {
    // Dashboard
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');

    // Profile
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');

    // Member area routes (accessible by members)
    Route::middleware(['role:member'])->group(function () {
        Route::get('/my-subscription', [SubscriptionController::class, 'mySubscription'])->name('my-subscription');
        Route::get('/my-attendance', [AttendanceController::class, 'myAttendance'])->name('my-attendance');
    });

    // Staff routes (accessible by staff and admin)
    Route::middleware(['role:staff,admin'])->group(function () {
        // Members management
        Route::get('/members', [MemberController::class, 'index'])->name('members.index');
        Route::get('/members/{id}', [MemberController::class, 'show'])->name('members.show');
        
        // Attendance management
        Route::resource('attendance', AttendanceController::class);
        
        // Check-in functionality
        Route::post('/check-in/{user}', [AttendanceController::class, 'checkIn'])->name('attendance.check-in');
        Route::post('/check-out/{user}', [AttendanceController::class, 'checkOut'])->name('attendance.check-out');
    });

    // Admin only routes
    Route::middleware(['role:admin'])->group(function () {
        // Membership plans
        Route::resource('membership-plans', MembershipPlanController::class);
        
        // Subscriptions
        Route::resource('subscriptions', SubscriptionController::class);
        
        // Payments
        Route::resource('payments', PaymentController::class);
    });
});

require __DIR__.'/auth.php';
```

### 4.2 Create Middleware for Role Check
```bash
php artisan make:middleware CheckRole
```

Edit the middleware file:
```php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class CheckRole
{
    public function handle(Request $request, Closure $next, ...$roles): Response
    {
        if (!$request->user() || !in_array($request->user()->role, $roles)) {
            abort(403, 'Unauthorized action.');
        }

        return $next($request);
    }
}
```

## Step 5: Create React Components (DONT TOUCH THE EXISTING COMPONENTS)

### 5.1 Layout Components
Create layouts in the resources/js/Layouts directory:
- AuthenticatedLayout.jsx (already provided by Breeze)
- AdminLayout.jsx
- MemberLayout.jsx

### 5.2 Page Components
Create the following pages in resources/js/Pages:

#### Dashboard.jsx
```jsx
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import { Head } from '@inertiajs/react';

export default function Dashboard({ auth, stats }) {
    return (
        <AuthenticatedLayout
            user={auth.user}
            header={<h2 className="font-semibold text-xl text-gray-800 leading-tight">Dashboard</h2>}
        >
            <Head title="Dashboard" />

            <div className="py-12">
                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                        <div className="p-6 text-gray-900">
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                                <div className="bg-blue-100 p-4 rounded-lg shadow">
                                    <h3 className="text-lg font-semibold">Members</h3>
                                    <p className="text-3xl font-bold">{stats.userCount}</p>
                                </div>
                                <div className="bg-green-100 p-4 rounded-lg shadow">
                                    <h3 className="text-lg font-semibold">Active Memberships</h3>
                                    <p className="text-3xl font-bold">{stats.activeSubscriptions}</p>
                                </div>
                                <div className="bg-purple-100 p-4 rounded-lg shadow">
                                    <h3 className="text-lg font-semibold">Total Revenue</h3>
                                    <p className="text-3xl font-bold">${stats.totalRevenue}</p>
                                </div>
                                <div className="bg-yellow-100 p-4 rounded-lg shadow">
                                    <h3 className="text-lg font-semibold">Today's Check-ins</h3>
                                    <p className="text-3xl font-bold">{stats.todayAttendance}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </AuthenticatedLayout>
    );
}
```

#### Members/Index.jsx
```jsx
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import { Head, Link } from '@inertiajs/react';

export default function MemberIndex({ auth, members }) {
    return (
        <AuthenticatedLayout
            user={auth.user}
            header={<h2 className="font-semibold text-xl text-gray-800 leading-tight">Members</h2>}
        >
            <Head title="Members" />

            <div className="py-12">
                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                        <div className="p-6 text-gray-900">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Membership Status</th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {members.data.map((member) => (
                                        <tr key={member.id}>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                {member.name}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                {member.email}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                {member.subscriptions && member.subscriptions.length > 0 ? (
                                                    member.subscriptions[0].status === 'active' ? (
                                                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                            Active
                                                        </span>
                                                    ) : (
                                                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                            {member.subscriptions[0].status}
                                                        </span>
                                                    )
                                                ) : (
                                                    <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                                        No Membership
                                                    </span>
                                                )}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                <Link href={route('members.show', member.id)} className="text-indigo-600 hover:text-indigo-900 mr-3">
                                                    View
                                                </Link>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </AuthenticatedLayout>
    );
}
```

## Step 6: Implement User Authentication Extensions

### 6.1 Update User Registration
Extend the RegisteredUserController to include additional fields:

```php
// In app/Http/Controllers/Auth/RegisteredUserController.php
// Update the store method:

public function store(Request $request): RedirectResponse
{
    $request->validate([
        'name' => 'required|string|max:255',
        'email' => 'required|string|email|max:255|unique:'.User::class,
        'password' => ['required', 'confirmed', Rules\Password::defaults()],
        'phone_number' => 'nullable|string|max:15',
        'date_of_birth' => 'nullable|date',
        'address' => 'nullable|string',
        'emergency_contact' => 'nullable|string|max:255',
        'emergency_contact_phone' => 'nullable|string|max:15',
    ]);

    $user = User::create([
        'name' => $request->name,
        'email' => $request->email,
        'password' => Hash::make($request->password),
        'role' => 'member', // Default role
        'phone_number' => $request->phone_number,
        'date_of_birth' => $request->date_of_birth,
        'address' => $request->address,
        'emergency_contact' => $request->emergency_contact,
        'emergency_contact_phone' => $request->emergency_contact_phone,
    ]);

    event(new Registered($user));

    Auth::login($user);

    return redirect(RouteServiceProvider::HOME);
}
```

### 6.2 Update Registration Form
Modify the React registration component to include the additional fields.

## Step 7: Seed Initial Data

### 7.1 Create Seeders
```bash
php artisan make:seeder RolesSeeder
php artisan make:seeder MembershipPlansSeeder
```

### 7.2 Implement Seeders

#### RolesSeeder.php
```php
<?php

namespace Database\Seeders;

use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;

class RolesSeeder extends Seeder
{
    public function run(): void
    {
        // Create admin user
        User::create([
            'name' => 'Admin User',
            'email' => 'admin@gym.com',
            'password' => Hash::make('password'),
            'role' => 'admin',
            'email_verified_at' => now(),
        ]);

        // Create staff user
        User::create([
            'name' => 'Staff User',
            'email' => 'staff@gym.com',
            'password' => Hash::make('password'),
            'role' => 'staff',
            'email_verified_at' => now(),
        ]);
    }
}
```

#### MembershipPlansSeeder.php
```php
<?php

namespace Database\Seeders;

use App\Models\MembershipPlan;
use Illuminate\Database\Seeder;

class MembershipPlansSeeder extends Seeder
{
    public function run(): void
    {
        $plans = [
            [
                'name' => 'Basic Membership',
                'description' => 'Access to gym facilities during standard hours.',
                'price' => 29.99,
                'duration_days' => 30,
                'is_active' => true,
            ],
            [
                'name' => 'Premium Membership',
                'description' => 'Full access to gym facilities and group classes.',
                'price' => 49.99,
                'duration_days' => 30,
                'is_active' => true,
            ],
            [
                'name' => 'Annual Membership',
                'description' => 'Full access to all facilities for an entire year. Best value!',
                'price' => 499.99,
                'duration_days' => 365,
                'is_active' => true,
            ],
        ];

        foreach ($plans as $plan) {
            MembershipPlan::create($plan);
        }
    }
}
```

### 7.3 Update DatabaseSeeder.php
```php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    public function run(): void
    {
        $this->call([
            RolesSeeder::class,
            MembershipPlansSeeder::class,
        ]);
    }
}
```

### 7.4 Run seeders
```bash
php artisan db:seed
```

## Step 8: Feature Implementation

### 8.1 Membership Management
Complete the MembershipPlanController methods to:
- List all membership plans
- Create new plans
- Edit existing plans
- Delete plans

### 8.2 Subscription Management
Complete the SubscriptionController methods to:
- Allow members to purchase subscriptions
- Process renewals
- Handle cancellations

### 8.4 Payment Processing
Simulate the PaymentController to:
- Process payments for memberships
- Generate receipts
- Track payment history